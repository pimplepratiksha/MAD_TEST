PROBLEM STATEMENT - 
We have to model the bank cashiers and the customers.
A cashier can be in two states, Occupied & Not Occupied. 
If a cashier is not occupied, the cashier takes the next customer from a queue. 
If the cashier is processing a customer the status is Occupied.
It takes 'n' seconds for a bank cashier to process one customer.
Customers are labelled in increasing numberical order 1,2,3.
All cashiers are operating in parallel independent of each other.

The input will be in the following format: 
./runprogram --numCashiers=3 --numCustomers=100 --timePerCustomer=3
The output will be the following format:
2019-04-05 13:20:22 --> Bank Simulation Started
2019-04-05 13:20:22 --> Cashier 1: Customer 1 Started
2019-04-05 13:20:22 --> Cashier 2: Customer 2 Started
2019-04-05 13:20:22 --> Cashier 3: Customer 3 Started
2019-04-05 13:20:22 --> Cashier 2: Customer 2 Completed
2019-04-05 13:20:22 --> Cashier 1: Customer 1 Completed
2019-04-05 13:20:22 --> Cashier 2: Customer 4 Started
.......
.......
.......
2019-04-05 13:20:22 --> Bank Simulated Ended

-----------------------------------------------------------------------------------------------------------------------  

1]Data structure - 
				  Mutex - to Lock and UnLock the customers..
				  go routines - for the customers and cashiers..
				  channels - to run cashiers simultaneously...
2]go routines - 
                  numOfCashiers() - will put lock on customer so that one customer will get updated at a time..and other cashier                         				                      will know about it..so it will take next customer in a queue.
                  numOfCustomers() - will simply run through the n number of customers and call the numOfCashiers...
                  timePerCustomer() - will contain sleep time per customer and let numOfCashiers will know about it...
                  
3] Pseudocode - 
				package main 
				import (
						"fmt"
						"time"
				)
				func main(){ 
						command line input - (number of cashiers,number of customers and time per customer.).
						fmt.Println("Bank simulation started ----");	
						call to the go routines as mentioned above...
						numberOfCustomers()
						numberOfCashier()
						timePerCustomer() call from numberOfCashier() function...
						fmt.Println("Bank simulation ended ----") 
				}
